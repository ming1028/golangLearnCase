// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/golangLearnCase/goOrm/gen/model"
)

func newUserInfo22(db *gorm.DB, opts ...gen.DOOption) userInfo22 {
	_userInfo22 := userInfo22{}

	_userInfo22.userInfo22Do.UseDB(db, opts...)
	_userInfo22.userInfo22Do.UseModel(&model.UserInfo22{})

	tableName := _userInfo22.userInfo22Do.TableName()
	_userInfo22.ALL = field.NewAsterisk(tableName)
	_userInfo22.ID = field.NewInt32(tableName, "id")
	_userInfo22.CreatedAt = field.NewTime(tableName, "created_at")
	_userInfo22.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userInfo22.DeletedAt = field.NewField(tableName, "deleted_at")
	_userInfo22.Name = field.NewString(tableName, "name")
	_userInfo22.Age = field.NewInt64(tableName, "age")
	_userInfo22.Birthday = field.NewTime(tableName, "birthday")
	_userInfo22.Email = field.NewString(tableName, "email")
	_userInfo22.Role = field.NewString(tableName, "role")
	_userInfo22.MemberNumber = field.NewString(tableName, "member_number")
	_userInfo22.Num = field.NewInt32(tableName, "num")
	_userInfo22.Address = field.NewString(tableName, "address")

	_userInfo22.fillFieldMap()

	return _userInfo22
}

type userInfo22 struct {
	userInfo22Do userInfo22Do

	ALL          field.Asterisk
	ID           field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Name         field.String
	Age          field.Int64
	Birthday     field.Time
	Email        field.String
	Role         field.String
	MemberNumber field.String
	Num          field.Int32
	Address      field.String

	fieldMap map[string]field.Expr
}

func (u userInfo22) Table(newTableName string) *userInfo22 {
	u.userInfo22Do.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInfo22) As(alias string) *userInfo22 {
	u.userInfo22Do.DO = *(u.userInfo22Do.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInfo22) updateTableName(table string) *userInfo22 {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Name = field.NewString(table, "name")
	u.Age = field.NewInt64(table, "age")
	u.Birthday = field.NewTime(table, "birthday")
	u.Email = field.NewString(table, "email")
	u.Role = field.NewString(table, "role")
	u.MemberNumber = field.NewString(table, "member_number")
	u.Num = field.NewInt32(table, "num")
	u.Address = field.NewString(table, "address")

	u.fillFieldMap()

	return u
}

func (u *userInfo22) WithContext(ctx context.Context) IUserInfo22Do {
	return u.userInfo22Do.WithContext(ctx)
}

func (u userInfo22) TableName() string { return u.userInfo22Do.TableName() }

func (u userInfo22) Alias() string { return u.userInfo22Do.Alias() }

func (u userInfo22) Columns(cols ...field.Expr) gen.Columns { return u.userInfo22Do.Columns(cols...) }

func (u *userInfo22) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInfo22) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["name"] = u.Name
	u.fieldMap["age"] = u.Age
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["email"] = u.Email
	u.fieldMap["role"] = u.Role
	u.fieldMap["member_number"] = u.MemberNumber
	u.fieldMap["num"] = u.Num
	u.fieldMap["address"] = u.Address
}

func (u userInfo22) clone(db *gorm.DB) userInfo22 {
	u.userInfo22Do.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInfo22) replaceDB(db *gorm.DB) userInfo22 {
	u.userInfo22Do.ReplaceDB(db)
	return u
}

type userInfo22Do struct{ gen.DO }

type IUserInfo22Do interface {
	gen.SubQuery
	Debug() IUserInfo22Do
	WithContext(ctx context.Context) IUserInfo22Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInfo22Do
	WriteDB() IUserInfo22Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInfo22Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInfo22Do
	Not(conds ...gen.Condition) IUserInfo22Do
	Or(conds ...gen.Condition) IUserInfo22Do
	Select(conds ...field.Expr) IUserInfo22Do
	Where(conds ...gen.Condition) IUserInfo22Do
	Order(conds ...field.Expr) IUserInfo22Do
	Distinct(cols ...field.Expr) IUserInfo22Do
	Omit(cols ...field.Expr) IUserInfo22Do
	Join(table schema.Tabler, on ...field.Expr) IUserInfo22Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfo22Do
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInfo22Do
	Group(cols ...field.Expr) IUserInfo22Do
	Having(conds ...gen.Condition) IUserInfo22Do
	Limit(limit int) IUserInfo22Do
	Offset(offset int) IUserInfo22Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfo22Do
	Unscoped() IUserInfo22Do
	Create(values ...*model.UserInfo22) error
	CreateInBatches(values []*model.UserInfo22, batchSize int) error
	Save(values ...*model.UserInfo22) error
	First() (*model.UserInfo22, error)
	Take() (*model.UserInfo22, error)
	Last() (*model.UserInfo22, error)
	Find() ([]*model.UserInfo22, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfo22, err error)
	FindInBatches(result *[]*model.UserInfo22, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserInfo22) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInfo22Do
	Assign(attrs ...field.AssignExpr) IUserInfo22Do
	Joins(fields ...field.RelationField) IUserInfo22Do
	Preload(fields ...field.RelationField) IUserInfo22Do
	FirstOrInit() (*model.UserInfo22, error)
	FirstOrCreate() (*model.UserInfo22, error)
	FindByPage(offset int, limit int) (result []*model.UserInfo22, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInfo22Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userInfo22Do) Debug() IUserInfo22Do {
	return u.withDO(u.DO.Debug())
}

func (u userInfo22Do) WithContext(ctx context.Context) IUserInfo22Do {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInfo22Do) ReadDB() IUserInfo22Do {
	return u.Clauses(dbresolver.Read)
}

func (u userInfo22Do) WriteDB() IUserInfo22Do {
	return u.Clauses(dbresolver.Write)
}

func (u userInfo22Do) Session(config *gorm.Session) IUserInfo22Do {
	return u.withDO(u.DO.Session(config))
}

func (u userInfo22Do) Clauses(conds ...clause.Expression) IUserInfo22Do {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInfo22Do) Returning(value interface{}, columns ...string) IUserInfo22Do {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInfo22Do) Not(conds ...gen.Condition) IUserInfo22Do {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInfo22Do) Or(conds ...gen.Condition) IUserInfo22Do {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInfo22Do) Select(conds ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInfo22Do) Where(conds ...gen.Condition) IUserInfo22Do {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInfo22Do) Order(conds ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInfo22Do) Distinct(cols ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInfo22Do) Omit(cols ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInfo22Do) Join(table schema.Tabler, on ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInfo22Do) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInfo22Do) RightJoin(table schema.Tabler, on ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInfo22Do) Group(cols ...field.Expr) IUserInfo22Do {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInfo22Do) Having(conds ...gen.Condition) IUserInfo22Do {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInfo22Do) Limit(limit int) IUserInfo22Do {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInfo22Do) Offset(offset int) IUserInfo22Do {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInfo22Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInfo22Do {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInfo22Do) Unscoped() IUserInfo22Do {
	return u.withDO(u.DO.Unscoped())
}

func (u userInfo22Do) Create(values ...*model.UserInfo22) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInfo22Do) CreateInBatches(values []*model.UserInfo22, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInfo22Do) Save(values ...*model.UserInfo22) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInfo22Do) First() (*model.UserInfo22, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo22), nil
	}
}

func (u userInfo22Do) Take() (*model.UserInfo22, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo22), nil
	}
}

func (u userInfo22Do) Last() (*model.UserInfo22, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo22), nil
	}
}

func (u userInfo22Do) Find() ([]*model.UserInfo22, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInfo22), err
}

func (u userInfo22Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInfo22, err error) {
	buf := make([]*model.UserInfo22, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInfo22Do) FindInBatches(result *[]*model.UserInfo22, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInfo22Do) Attrs(attrs ...field.AssignExpr) IUserInfo22Do {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInfo22Do) Assign(attrs ...field.AssignExpr) IUserInfo22Do {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInfo22Do) Joins(fields ...field.RelationField) IUserInfo22Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInfo22Do) Preload(fields ...field.RelationField) IUserInfo22Do {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInfo22Do) FirstOrInit() (*model.UserInfo22, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo22), nil
	}
}

func (u userInfo22Do) FirstOrCreate() (*model.UserInfo22, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInfo22), nil
	}
}

func (u userInfo22Do) FindByPage(offset int, limit int) (result []*model.UserInfo22, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInfo22Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInfo22Do) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInfo22Do) Delete(models ...*model.UserInfo22) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInfo22Do) withDO(do gen.Dao) *userInfo22Do {
	u.DO = *do.(*gen.DO)
	return u
}
